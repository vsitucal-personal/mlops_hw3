services:
  db:
    image: postgres:${PG_VERSION}
    container_name: mlflow_postgres
    restart: always
    expose:
      - "${PG_PORT}"
    networks:
      - single-network
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DATABASE}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD", "pg_isready", "-p", "${PG_PORT}", "-U", "${PG_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 3

  minio:
    image: quay.io/minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - single-network

  minio-create-bucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb local/mlflow;
      mc policy set public local/mlflow;
      exit 0;
      "
    networks:
      - single-network

  pytest:
    build:
      context: .
      dockerfile: ./dockerfiles/pytest
    container_name: pytest
    ports:
      - "7000:7000"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    command: python3 -m http.server 7000

  mlflow:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfiles/mlflow
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_ARTIFACT_URI=${MLFLOW_ARTIFACT_URI}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
    depends_on:
      - minio
      - db
    command: >
      mlflow server
      --backend-store-uri postgresql+psycopg2://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE}
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination ${MLFLOW_BUCKET_NAME}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - single-network

  fastapi:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi
    container_name: fastapi_dir
    ports:
      - "8000:8000"
    depends_on:
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_ARTIFACT_URI=${MLFLOW_ARTIFACT_URI}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
    networks:
      - single-network

  jupyterlab_instance:
    build:
      context: .
      dockerfile: ./dockerfiles/mlflow
    container_name: jupyterlab_instance
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_ARTIFACT_URI=${MLFLOW_ARTIFACT_URI}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
    networks:
      - single-network
    depends_on:
      - mlflow
    command: [ "jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser"]

volumes:
  minio_data:

networks:
  single-network:
    driver: bridge
